// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: music.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PutridParrot.Music {

  /// <summary>Holder for reflection information generated from music.proto</summary>
  public static partial class MusicReflection {

    #region Descriptor
    /// <summary>File descriptor for music.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MusicReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgttdXNpYy5wcm90bxIFbXVzaWMiNgoMTm90ZXNSZXF1ZXN0EhgKA2tleRgB",
            "IAEoDjILLm11c2ljLk5vdGUSDAoEbmFtZRgCIAEoCSJTCg1Ob3Rlc1Jlc3Bv",
            "bnNlEhgKA2tleRgBIAEoDjILLm11c2ljLk5vdGUSDAoEbmFtZRgCIAEoCRIa",
            "CgVub3RlcxgDIAMoDjILLm11c2ljLk5vdGUqXwoETm90ZRIFCgFDEAASBgoC",
            "Q0QQARIFCgFEEAISBgoCREUQAxIFCgFFEAQSBQoBRhAFEgYKAkZHEAYSBQoB",
            "RxAHEgYKAkdBEAgSBQoBQRAJEgYKAkFCEAoSBQoBQhALMkQKDE11c2ljU2Vy",
            "dmljZRI0CgVRdWVyeRITLm11c2ljLk5vdGVzUmVxdWVzdBoULm11c2ljLk5v",
            "dGVzUmVzcG9uc2UiAEItChZjb20ucHV0cmlkcGFycm90Lm11c2ljqgISUHV0",
            "cmlkUGFycm90Lk11c2ljYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PutridParrot.Music.Note), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PutridParrot.Music.NotesRequest), global::PutridParrot.Music.NotesRequest.Parser, new[]{ "Key", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PutridParrot.Music.NotesResponse), global::PutridParrot.Music.NotesResponse.Parser, new[]{ "Key", "Name", "Notes" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///
  ///Note definitions, where two letters are used,
  ///the first denotes the # (sharp) and the second 
  ///the b (flat)
  /// </summary>
  public enum Note {
    [pbr::OriginalName("C")] C = 0,
    [pbr::OriginalName("CD")] Cd = 1,
    [pbr::OriginalName("D")] D = 2,
    [pbr::OriginalName("DE")] De = 3,
    [pbr::OriginalName("E")] E = 4,
    [pbr::OriginalName("F")] F = 5,
    [pbr::OriginalName("FG")] Fg = 6,
    [pbr::OriginalName("G")] G = 7,
    [pbr::OriginalName("GA")] Ga = 8,
    [pbr::OriginalName("A")] A = 9,
    [pbr::OriginalName("AB")] Ab = 10,
    [pbr::OriginalName("B")] B = 11,
  }

  #endregion

  #region Messages
  public sealed partial class NotesRequest : pb::IMessage<NotesRequest> {
    private static readonly pb::MessageParser<NotesRequest> _parser = new pb::MessageParser<NotesRequest>(() => new NotesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PutridParrot.Music.MusicReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotesRequest(NotesRequest other) : this() {
      key_ = other.key_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotesRequest Clone() {
      return new NotesRequest(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::PutridParrot.Music.Note key_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PutridParrot.Music.Note Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Key);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Key);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            key_ = (global::PutridParrot.Music.Note) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotesResponse : pb::IMessage<NotesResponse> {
    private static readonly pb::MessageParser<NotesResponse> _parser = new pb::MessageParser<NotesResponse>(() => new NotesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PutridParrot.Music.MusicReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotesResponse(NotesResponse other) : this() {
      key_ = other.key_;
      name_ = other.name_;
      notes_ = other.notes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotesResponse Clone() {
      return new NotesResponse(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::PutridParrot.Music.Note key_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PutridParrot.Music.Note Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "notes" field.</summary>
    public const int NotesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PutridParrot.Music.Note> _repeated_notes_codec
        = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::PutridParrot.Music.Note) x);
    private readonly pbc::RepeatedField<global::PutridParrot.Music.Note> notes_ = new pbc::RepeatedField<global::PutridParrot.Music.Note>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PutridParrot.Music.Note> Notes {
      get { return notes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Name != other.Name) return false;
      if(!notes_.Equals(other.notes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= notes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Key);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      notes_.WriteTo(output, _repeated_notes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Key);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += notes_.CalculateSize(_repeated_notes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotesResponse other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      notes_.Add(other.notes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            key_ = (global::PutridParrot.Music.Note) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26:
          case 24: {
            notes_.AddEntriesFrom(input, _repeated_notes_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
